#!/usr/bin/env ruby

require 'daemons'
require 'eventmachine'
require 'logger'
require 'yaml'
require 'tweetlr'

begin
  config_file = File.join( Dir.pwd,  'config', 'tweetlr.yml')
  tid_file = File.join( Dir.pwd ,"tweetlr.tid")
  start_at_tweet_id = lambda { 
     begin
      File.open(tid_file, "r") { |io| io.gets.to_i } 
    	rescue Errno::ENOENT => e
        $stderr.puts "#{e} - we use the value from the configuration file" 
    	  nil 
    	end
  }.call
  CONFIG = YAML.load_file(config_file)
  CONFIG['start_at_tweet_id'] = start_at_tweet_id || CONFIG['start_at_tweet_id'] || CONFIG['twitter_timestamp'] #check the latter for backwards compability
   
  UPDATE_PERIOD = CONFIG['update_period']  

  @tweetlr_config = {
    :tumblr_blog_hostname => CONFIG['tumblr_blog_hostname'] || CONFIG['group'],
    :tumblr_oauth_api_key => CONFIG['tumblr_oauth_api_key'],
    :tumblr_oauth_api_secret => CONFIG['tumblr_oauth_api_secret'],
    :tumblr_blog_hostname => CONFIG['tumblr_blog_hostname'],
    :tumblr_oauth_access_token_key => CONFIG['tumblr_oauth_access_token_key'],
    :tumblr_oauth_access_token_secret => CONFIG['tumblr_oauth_access_token_secret'],
    :whitelist => CONFIG['whitelist'], 
    :shouts => CONFIG['shouts'], 
    :since_id => CONFIG['start_at_tweet_id'] , 
    :terms => CONFIG['search_term'], 
    :loglevel => CONFIG['loglevel'],
    :update_period => UPDATE_PERIOD,
    :api_endpoint_tumblr => CONFIG['api_endpoint_tumblr'],
    :api_endpoint_twitter => CONFIG['api_endpoint_twitter'],
    :results_per_page => CONFIG['results_per_page'],
    :result_type => CONFIG['result_type'],
    :embedly_key => CONFIG['embedly_key']
    }
rescue SystemCallError
  $stderr.puts "Ooops - looks like there is no ./config/tweetlr.yml found. I'm affraid tweetlr won't work properly until you introduced that configuration file."
  exit(1)
end

Daemons.run_proc('tweetlr', :dir_mode => :script, :dir => './', :backtrace => true, :log_output => true) do
  @log = Logger.new(STDOUT)
  @log.info "starting tweetlr daemon..." 
  @log.info "creating a new tweetlr instance using this config: #{@tweetlr_config.inspect}"   
  EventMachine::run do 
    EventMachine::add_periodic_timer( UPDATE_PERIOD ) do
      response = Tweetlr::Core.crawl(@tweetlr_config)
      File.open(tid_file, "w+") { |io| io.write(response[:since_id]) }
      @tweetlr_config.merge! response
     end
   end
end